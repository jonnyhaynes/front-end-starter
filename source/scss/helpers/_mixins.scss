/*------------------------------------*\
  $MIXINS
\*------------------------------------*/

/**
 * Font family
 */

@mixin font($family: 'open-sans', $weight: 'regular') {
  @if($family == 'Open Sans') {
    @if($weight == 'regular') {
      font: { family: 'Open Sans', sans-serif; weight: 400; }
    } @elseif($weight == 'medium') {
      font: { family: 'Open Sans', sans-serif; weight: 600; }
    } @elseif($weight == 'medium') {
      font: { family: 'Open Sans', sans-serif; weight: 700; }
    }
  } @elseif($family == 'georgia') {
    @if($weight == 'regular') {
      font-family: Georgia, Times, 'Times New Roman', serif;
    } @elseif($weight == 'bold') {
      font-family: Georgia, Times, 'Times New Roman', serif;
    }
  }
}

/**
 * Font sizing in rems
 */

 @mixin font-size($font-size, $line-height: false) {
   $rem-size: $font-size / $base-font-size;
   font-size: #{$font-size}px;
   font-size: #{$rem-size}rem;
   @if $line-height {
     line-height: $line-height;
   }
 }


/**
 * Target devices based on pixel ratio
 */

@mixin device-pixel-ratio($ratio: 2) {
  @media only screen and (-webkit-min-device-pixel-ratio: $ratio),
  only screen and (min--moz-device-pixel-ratio: $ratio),
  only screen and (-o-min-device-pixel-ratio: #{($ratio*10)}/10),
  only screen and (min-device-pixel-ratio: $ratio),
  only screen and (min-resolution: #{($ratio*96)}dpi),
  only screen and (min-resolution: #{$ratio}dppx) {
    @content;
  }
}


/**
 * Link states
 *
 * @include states {
 *   color: blue;
 * }
 */

@mixin states() {
  &:hover,
  &:active,
  &:focus {
    @content;
  }
}


/**
 * Style all headings at once
 *
 * @include headings {
 *   color: red;
 * }
 */

@mixin headings() {
  h1,
  h2,
  h3,
  h4,
  h5,
  h6 {
    @content;
  }
}


/**
 * Vertically align an element
 * inside its container
 *
 * .thing {  @include verically-align; }
 */

@mixin verically-align {
  position: relative;
  top: 50%;
  transform: translateY(-50%);
}


/**
 * SVG background images with fallback
 *
 * .thing { @include svg-background(icon-red); }
 */

 @mixin svg-background($image) {
  background: file-url(#{$image} + '.svg');

  .no-svg & {
    background: {
      image: file-url(#{$image} + '.png');
    }
  }
}


/**
 * Set the position and top, right, bottom, left values
 *
 * .thing {  @include position(relative, 0, 1px, 10px, 0); }
 */

@mixin position($position, $top, $right, $bottom, $left) {
  position: $position;
  @if $top { top: $top; }
  @if $right { right: $right; }
  @if $bottom { bottom: $bottom; }
  @if $left { left: $left; }
}
